SET DEFINE OFF;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO  TABLECHECKERFLAG FROM USER_TABLES WHERE TABLE_NAME = UPPER('USERS');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE USERS(ID  NUMBER NOT NULL ENABLE,
            LOGIN_ID VARCHAR2(64) NOT NULL UNIQUE,
            PASSWORD VARCHAR2(256) NOT NULL,
            ROLE VARCHAR2(64) NOT NULL UNIQUE,
            STATUS VARCHAR2(64) NOT NULL,
            CONSTRAINT USER_ID_PK PRIMARY KEY(ID))';
    END IF;
END;
/
DECLARE
SEQCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQCHECKERFLAG FROM USER_SEQUENCES WHERE SEQUENCE_NAME = UPPER('USER_ID_SEQ');
    IF SEQCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE USER_ID_SEQ MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGCHECKERFLAG INT; 
BEGIN
    SELECT COUNT(*) INTO TRIGCHECKERFLAG FROM USER_TRIGGERS WHERE TRIGGER_NAME = UPPER('USER_ID_INSERT');
    IF TRIGCHECKERFLAG = 0  THEN
        EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "USER_ID_INSERT" BEFORE INSERT ON USERS FOR EACH ROW BEGIN SELECT USER_ID_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
        EXECUTE IMMEDIATE 'ALTER TRIGGER  "USER_ID_INSERT" ENABLE';
    END IF;
END;
/   
-- DECLARE
-- TABLECHECKERFLAG
-- BEGIN
--     SELECT COUNT(*) INTO  TABLECHECKERFLAG FROM USER_TABLES WHERE TABLE_NAME = UPPER('ROLES');
--     IF TABLECHECKERFLAG = 0 THEN
--         EXECUTE IMMEDIATE 'CREATE TABLE ROLES(ID  NUMBER NOT NULL ENABLE,
--             ROLE VARCHAR2(64) NOT NULL UNIQUE,
--             USER_ID NUMBER NOT NULL,
--             STATUS VARCHAR2(64) NOT NULL,
--             CONSTRAINT ROLE_ID_PK PRIMARY KEY(ID),
--             CONSTRAINT ROLE_USER_ID_FK FOREING KEY(USER_ID) REFERENCES USERS(ID))';
--     END IF;
-- END;
-- /
-- DECLARE
-- SEQCHECKERFLAG
-- BEGIN
--     SELECT COUNT(*) INTO SEQCHECKERFLAG FROM USER_SEQUENCES WHERE SEQUENCE_NAME = UPPER('ROLE_ID_SEQ');
--     IF SEQCHECKERFLAG = 0 THEN
--         EXECUTE IMMEDIATE 'CREATE SEQUENCE ROLE_ID_SEQ MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
--     END IF;
-- END;
-- /
-- DECLARE
-- TRIGCHECKERFLAG
-- BEGIN
--     SELECT COUNT(*) INTO TRIGCHECKERFLAG FROM USER_TRIGGERS WHERE TRIGGER_NAME = UPPER('ROLE_ID_INSERT');
--     IF TRIGCHECKERFLAG = 0  THEN
--         EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "ROLE_ID_INSERT" BEFORE INSERT ON ROLES FOR EACH ROW BEGIN SELECT ROLE_ID_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
--         EXECUTE IMMEDIATE 'ALTER TRIGGER  "ROLE_ID_INSERT" ENABLE';
--     END IF;
-- END;
-- /
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO  TABLECHECKERFLAG FROM USER_TABLES WHERE TABLE_NAME = UPPER('STUDENT_QUESTIONNAIRE');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE STUDENT_QUESTIONNAIRE(QUESTION_DETAILS CLOB NULL)';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO  TABLECHECKERFLAG FROM USER_TABLES WHERE TABLE_NAME = UPPER('STUDENTS');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE STUDENTS(ID NUMBER NOT NULL ENABLE,
                LOGIN_ID VARCHAR2(64) NOT NULL,
                FIRST_NAME VARCHAR2(64) NOT NULL,
                LAST_NAME VARCHAR2(64) NOT NULL,
                MAIL VARCHAR2(128) NOT NULL UNIQUE,
                PHONE VARCHAR2(128) NOT NULL UNIQUE,
                ADDRESS VARCHAR2(1000) NULL,
                GMATORGREGPA NUMBER,
                GMATORGRESCORE NUMBER,
                SECONDARYEMAIL VARCHAR2(128) NULL,
                STATUS VARCHAR2(64) NOT NULL,
                CREATED_DATE TIMESTAMP(6) NOT NULL,
                TESTDETAILS CLOB,
                CONSTRAINT STUDENT_ID_PK PRIMARY KEY(ID))';
--                 ,CONSTRAINT STUDENT_LOGIN_ID_FK FOREING KEY(LOGIN_ID) REFERENCES USERS(ID))';
    END IF;
END;
/
DECLARE
SEQCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQCHECKERFLAG FROM USER_SEQUENCES WHERE SEQUENCE_NAME = UPPER('STUDENT_ID_SEQ');
    IF SEQCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE STUDENT_ID_SEQ MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TRIGCHECKERFLAG FROM USER_TRIGGERS WHERE TRIGGER_NAME = UPPER('STUDENT_ID_INSERT');
    IF TRIGCHECKERFLAG = 0  THEN
        EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "STUDENT_ID_INSERT" BEFORE INSERT ON STUDENTS FOR EACH ROW BEGIN SELECT STUDENT_ID_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
        EXECUTE IMMEDIATE 'ALTER TRIGGER  "STUDENT_ID_INSERT" ENABLE';
    END IF;
END;
/   
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO  TABLECHECKERFLAG FROM USER_TABLES WHERE TABLE_NAME = UPPER('CONCENTRATIONS');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE CONCENTRATIONS(ID NUMBER NOT NULL ENABLE,
                    NAME VARCHAR2(128) NOT NULL UNIQUE,
                    STATUS VARCHAR2(64) NOT NULL,
                    CREATED_DATE TIMESTAMP(6) NOT NULL,
                    CONSTRAINT CONCENTATION_ID_PK PRIMARY KEY(ID))';
    END IF;
END;
/
DECLARE
SEQCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQCHECKERFLAG FROM USER_SEQUENCES WHERE SEQUENCE_NAME = UPPER('CONCENTATION_ID_SEQ');
    IF SEQCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE CONCENTATION_ID_SEQ MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TRIGCHECKERFLAG FROM USER_TRIGGERS WHERE TRIGGER_NAME = UPPER('CONCENTRATION_ID_INSERT');
    IF TRIGCHECKERFLAG = 0  THEN
        EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CONCENTRATION_ID_INSERT" BEFORE INSERT ON CONCENTRATIONS FOR EACH ROW BEGIN SELECT CONCENTATION_ID_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
        EXECUTE IMMEDIATE 'ALTER TRIGGER  "CONCENTRATION_ID_INSERT" ENABLE';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO  TABLECHECKERFLAG FROM USER_TABLES WHERE TABLE_NAME = UPPER('ADVISORS');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE ADVISORS(ID NUMBER NOT NULL ENABLE,
                    LOGIN_ID VARCHAR2(64) NOT NULL,
                    CONCENTRATION_ID NUMBER NOT NULL,
                    MAIL VARCHAR2(128) NOT NULL UNIQUE,
                    NAME VARCHAR2(128) NOT NULL,
                    STATUS VARCHAR2(64) NOT NULL,
                    CREATED_DATE TIMESTAMP(6) NOT NULL,
                    CONSTRAINT ADVISOR_ID_PK PRIMARY KEY(ID),
                    CONSTRAINT ADVISOR_CON_ID_FK FOREIGN KEY(CONCENTRATION_ID) REFERENCES CONCENTRATIONS(ID))';
--                     CONSTRAINT ADVISOR_LOGIN_ID_FK FOREIGN KEY(LOGIN_ID) REFERENCES USERS(ID))';
    END IF;
END;
/
DECLARE
SEQCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQCHECKERFLAG FROM USER_SEQUENCES WHERE SEQUENCE_NAME = UPPER('ADVISOR_ID_SEQ');
    IF SEQCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE ADVISOR_ID_SEQ MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TRIGCHECKERFLAG FROM USER_TRIGGERS WHERE TRIGGER_NAME = UPPER('ADVISOR_ID_INSERT');
    IF TRIGCHECKERFLAG = 0  THEN
        EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "ADVISOR_ID_INSERT" BEFORE INSERT ON ADVISORS FOR EACH ROW BEGIN SELECT ADVISOR_ID_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
        EXECUTE IMMEDIATE 'ALTER TRIGGER  "ADVISOR_ID_INSERT" ENABLE';
    END IF;
END;
/
   
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO  TABLECHECKERFLAG FROM USER_TABLES WHERE TABLE_NAME = UPPER('COURCES');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE COURCES(ID NUMBER NOT NULL ENABLE,
                    NAME VARCHAR2(64) NOT NULL UNIQUE,
                    PREFIX VARCHAR2(16) NOT NULL UNIQUE,
                    CODE VARCHAR2(16) NOT NULL UNIQUE,
                    STATUS VARCHAR2(64) NOT NULL,
                    CREATED_DATE TIMESTAMP(6) NOT NULL,
                    CONSTRAINT COURCE_ID_PK PRIMARY KEY(ID))';
    END IF;
END;
/
DECLARE
SEQCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQCHECKERFLAG FROM USER_SEQUENCES WHERE SEQUENCE_NAME = UPPER('COURCE_ID_SEQ');
    IF SEQCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE COURCE_ID_SEQ MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TRIGCHECKERFLAG FROM USER_TRIGGERS WHERE TRIGGER_NAME = UPPER('COURCE_ID_INSERT');
    IF TRIGCHECKERFLAG = 0  THEN
        EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "COURCE_ID_INSERT" BEFORE INSERT ON COURCES FOR EACH ROW BEGIN SELECT COURCE_ID_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
        EXECUTE IMMEDIATE 'ALTER TRIGGER  "COURCE_ID_INSERT" ENABLE';
    END IF;
END;
/
DECLARE
TABLECHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO  TABLECHECKERFLAG FROM USER_TABLES WHERE TABLE_NAME = UPPER('CONCENTRATION_COURCES');
    IF TABLECHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE TABLE CONCENTRATION_COURCES(ID NUMBER NOT NULL ENABLE,
                    CONCENTRATION_ID NUMBER NOT NULL,
                    COURCE_ID NUMBER NOT NULL,
                    STATUS VARCHAR2(64) NOT NULL,
                    CREATED_DATE TIMESTAMP(6) NOT NULL,
                    CONSTRAINT CON_COURCE_ID_PK PRIMARY KEY(ID),
                    CONSTRAINT CON_CRSE_CON_ID_CRS_ID_UK UNIQUE(CONCENTRATION_ID,COURCE_ID),
                    CONSTRAINT CON_CRSE_CON_ID_FK FOREIGN KEY(CONCENTRATION_ID) REFERENCES CONCENTRATIONS(ID),
                    CONSTRAINT CON_CRSE_COURSE_ID_FK FOREIGN KEY(COURCE_ID) REFERENCES COURCES(ID))';
    END IF;
END;
/
DECLARE
SEQCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO SEQCHECKERFLAG FROM USER_SEQUENCES WHERE SEQUENCE_NAME = UPPER('CON_COURCE_ID_SEQ');
    IF SEQCHECKERFLAG = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE CON_COURCE_ID_SEQ MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
    END IF;
END;
/
DECLARE
TRIGCHECKERFLAG INT;
BEGIN
    SELECT COUNT(*) INTO TRIGCHECKERFLAG FROM USER_TRIGGERS WHERE TRIGGER_NAME = UPPER('CON_COURCE_ID_INSERT');
    IF TRIGCHECKERFLAG = 0  THEN
        EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "CON_COURCE_ID_INSERT" BEFORE INSERT ON CONCENTRATION_COURCES FOR EACH ROW BEGIN SELECT CON_COURCE_ID_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
        EXECUTE IMMEDIATE 'ALTER TRIGGER  "CON_COURCE_ID_INSERT" ENABLE';
    END IF;
END;
/
-- DECLARE
-- TABLECHECKERFLAG
-- BEGIN
--     SELECT COUNT(*) INTO  TABLECHECKERFLAG FROM USER_TABLES WHERE TABLE_NAME = UPPER('ADVISOR_CONCENTRATIONS');
--     IF TABLECHECKERFLAG = 0 THEN
--         EXECUTE IMMEDIATE 'CREATE TABLE ADVISOR_CONCENTRATIONS(ID NUMBER NOT NULL ENABLE,
--                     ADVISOR_ID NUMBER NOT NULL,
--                     CONCENTRATION_ID NUMBER NOT NULL,
--                     STATUS VARCHAR2(64) NOT NULL,
--                     CREATED_DATE TIMESTAMP(6) NOT NULL,
--                     CONSTRAINT COURCE_ID_PK PRIMARY KEY(ID),
--                     CONSTRAINT ADV_ID_CON_ID_UK UNIQUE(ADVISOR_ID,CONCENTRATION_ID),
--                     CONSTRAINT ADV_CONS_ADV_ID_FK FOREIGN KEY(ADVISOR_ID) REFERENCES ADVISORS(ID),
--                     CONSTRAINT ADV_CONS_CON_ID_FK FOREIGN KEY(ADVISOR_ID) REFERENCES CONCENTRATIONS(ID))';
--     END IF;
-- END;
-- /
-- DECLARE
-- SEQCHECKERFLAG
-- BEGIN
--     SELECT COUNT(*) INTO SEQCHECKERFLAG FROM USER_SEQUENCES WHERE SEQUENCE_NAME = UPPER('ADV_CON_ID_SEQ');
--     IF SEQCHECKERFLAG = 0 THEN
--         EXECUTE IMMEDIATE 'CREATE SEQUENCE ADV_CON_ID_SEQ MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE';
--     END IF;
-- END;
-- /
-- DECLARE
-- TRIGCHECKERFLAG
-- BEGIN
--     SELECT COUNT(*) INTO TRIGCHECKERFLAG FROM USER_TRIGGERS WHERE TRIGGER_NAME = UPPER('ADV_CON_ID_INSERT');
--     IF TRIGCHECKERFLAG = 0  THEN
--         EXECUTE IMMEDIATE 'CREATE OR REPLACE TRIGGER  "ADV_CON_ID_INSERT" BEFORE INSERT ON ADVISOR_CONCENTRATIONS FOR EACH ROW BEGIN SELECT ADV_CON_ID_SEQ.NEXTVAL INTO :new.ID FROM DUAL; END;';
--         EXECUTE IMMEDIATE 'ALTER TRIGGER  "ADV_CON_ID_INSERT" ENABLE';
--     END IF;
-- END;
-- /